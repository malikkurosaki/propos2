#!/usr/bin/env node

// get arguments
const params = process.argv.slice(2);
const path = require('path');
const fs = require('fs');

const pathFile = path.join('./xmakuro');
const targetFile = fs.readFileSync(pathFile).toString();
const listMenu = targetFile.match(/.*function.*\)/g).map(item => item.replace(/function\s+/g, '').replace(/\(.*\)/g, '')).filter(e => !e.includes("match"));

// check argument if available
if (params.length > 0) {
    if (params[0] === '-i' || params[0] === '--install') {
        require(`child_process`).execSync(`npm i lodash`);
        return;
    } else {
        console.log("menu belum ada , mungkin next");
        return;
    }
} else {
    const prompts = require('prompts');
    const _ = require('lodash');
    prompts({
        type: "autocomplete",
        name: "menu",
        message: "pilih menu",
        choices: listMenu.map(itm => {
            return {
                title: _.startCase(itm),
                value: itm
            }
        })
    }).then(({ menu }) => {
        if (!menu) return console.log("ok dah....");
        eval(`${menu}()`);
        return;
    })
}

// ================== Code =================


const exec = require('child_process').execSync;
const beautify = require('js-beautify');
const _ = require('lodash');
const { execSync } = require('child_process');

function builder() {
    require('./xgenerate')
}


function runChrome() {
    exec(`flutter run -d chrome`, { stdio: "inherit", cwd: "./client" });
}

function runServer() {
    exec(`nodemon .`, { stdio: "inherit", cwd: "./server" })
}

function generateRouter() {

    const sourceDir = path.join(__dirname, "./server/routers");
    const listSource = fs.readdirSync(sourceDir);

    const targetFile = path.join(__dirname, "./client/lib/rot.dart")
    let listRouter = [];

    for (let itm of listSource) {
        let dir = path.join(sourceDir, itm);
        let listDir = fs.readdirSync(dir);
        for (let itmDir of listDir) {
            let name = path.parse(itmDir).name;
            let method = path.parse(itmDir).name.split('_').splice(-1);
            let host = "${Config.host}"
            let query = "${query??''}";
            let body = "body: body"
            let data = `static Future<http.Response> ${_.camelCase(name)}({String? query, Map? body}) => http.${method}(Uri.parse("${host}/${_.kebabCase(name)}?${query}"), headers: {"deviceId": Vl.deviceId.val}, ${method != 'get' ? body : ''});`
            listRouter.push(data);
        }

    }

    let tmp = `
    import 'package:http/http.dart' as http;
    import 'package:propos/utils/config.dart';
    import 'package:propos/utils/vl.dart';

    class Rot{
        ${listRouter.join('')}
    }
`
    fs.writeFileSync(targetFile, beautify(tmp));
    console.log("generate router completed")
}

function flutterCommand() {
    require('prompts')({
        type: "text",
        name: "cmd",
        message: "masukkan perintah"
    }).then(({ cmd }) => {
        if (!cmd) return console.log("ok , gk ada ya");
        require('child_process').execSync(cmd, { stdio: "inherit", cwd: "./client/" });
        console.log("command completed");
    })
}

function gitPush() {
    let branch = require('child_process').execSync('git rev-parse --abbrev-ref HEAD',).toString().trim();
    require('child_process').execSync(`git add . && git commit -m "${branch}" && git push origin ${branch}`, { stdio: "inherit" });
}

function prismaMigrate() {
    require('child_process').execSync(`npx prisma migrate dev --name '$(date)'`, { stdio: "inherit", cwd: "./server" });
    console.log("migrate completed");
}

function prismaGenerate() {
    require('child_process').execSync(`npx prisma generate`, { stdio: "inherit", cwd: "./server" });
    console.log('generate completed');
}

function commandServer() {
    require(`prompts`)({
        type: "text",
        name: "cmd",
        message: "masukkan perintah"
    }).then(({ cmd }) => {
        if (!cmd) return console.log("ok gak ada");
        const exec = require('child_process').execSync(cmd, { stdio: "inherit", cwd: "./server" });
    });

}

function commandClient() {
    require(`prompts`)({
        type: "text",
        name: "cmd",
        message: "masukkan perintah"
    }).then(({ cmd }) => {
        if (!cmd) return console.log("ok gak ada");
        const exec = require('child_process').execSync(cmd, { stdio: "inherit", cwd: "./client" });
    });
}

function runAndroid() {
    require('child_process').execSync(`flutter run`, { stdio: "inherit", cwd: "./client" })
    console.log("run android cuccess");
}

function setIp() {
    const ip = require('ip');
    const fs = require('fs');
    const path = require('path');

    const tp = path.join(__dirname, './client/lib/utils/config.dart');
    const tar = fs.readFileSync(tp).toString();


    const rg = tar.replace(/static const host.*/g, `static const host = "http://${ip.address()}:3000";`)
    console.log(ip.address());
    fs.writeFileSync(tp, rg);
    console.log("success");
}


function CreatePage() {

    const fs = require('fs');
    const path = require('path');
    const colors = require('colors');
    const execSync = require('child_process').execSync;
    const _ = require('lodash');
    const beautify = require('js-beautify').js_beautify;
    const prompts = require("prompts");

    const target = fs.readdirSync(path.join(__dirname, './client/lib/pages'))

    prompts({
        type: "text",
        name: "name",
        message: "masukkan nama page yang ingin anda buat"
    }).then(({ name }) => {
        if (name == undefined) return console.log("anda tidak memasukkan nama page".red);
        if (target.includes(_.snakeCase(name) + "_page.dart")) return console.log("nama page yang anda masukkan sudah ada".red);

        let template = `
    import 'package:flutter/material.dart';
    import 'package:responsive_builder/responsive_builder.dart';

    class ${_.upperFirst(_.camelCase(name))}Page extends StatelessWidget {
    const ${_.upperFirst(_.camelCase(name))}Page({Key? key}) : super(key: key);

    @override
    Widget build(BuildContext context) {
        return ResponsiveBuilder(builder: (context, media) {
        return SafeArea(
            child: ListView(
            children: [
                Text('Hello World'),
            ],
            ),
        );
        });
    }
    }

`

        fs.writeFileSync(path.join(__dirname, `./client/lib/pages/${_.snakeCase(name)}_page.dart`), beautify(template, { indent_size: 2 }));
        // execSync(`node page_generate.js`, { stdio: "inherit", cwd: path.join(__dirname, './../con/') });
        console.log("page berhasil dibuat".green);
    })
}

function PageGenerate() {

    const fs = require('fs');
    const path = require('path');
    const colors = require('colors');
    const execSync = require('child_process').execSync;
    const _ = require('lodash');
    const beautify = require('js-beautify').js_beautify;
    const prompts = require("prompts");

    const target = fs.readdirSync(path.join(__dirname, './client/lib/pages'));

    let listItm = [];
    let listImport = [];
    let listWidget = [];
    for (let itm of target.map(e => e.split('.')[0])) {
        if (itm.includes('root')) {
            listItm.push(`Pages.${_.camelCase(itm)}() : route = "/";`)
            listWidget.push(`GetPage(
            name: "/",
            page: () => ${_.upperFirst(_.camelCase(itm))}(),
        )`)
        } else {
            listItm.push(`Pages.${_.camelCase(itm)}() : route = "/${itm}";`)

            listWidget.push(`GetPage(
            name: "/${itm}",
            page: () => ${_.upperFirst(_.camelCase(itm))}(),
        )`)
        }

        listImport.push(`import './pages/${itm}.dart';`)

    }

    let template = `
        import 'package:get/route_manager.dart';
        ${listImport.join('\n')}

        ${listImport.join('\n')}
        class Pages {
        late String route;

        ${listItm.join('\n')}

        static final listPage = <GetPage>[
            ${listWidget.join(',\n')}
        ];
        
        }
    `

    fs.writeFileSync(path.join(__dirname, `./client/lib/pages.dart`), beautify(template, { indent_size: 2 }));
    console.log("page generated");
}

async function runAndroid() {
    
    execSync(`flutter run`, { stdio: "inherit", cwd: path.join(__dirname, "./client") })

}
